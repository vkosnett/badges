<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_navyn_badges.ClientDateTimeUtils</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>ClientDateTimeUtils</name>
        <script><![CDATA[var ClientDateTimeUtils = Class.create();
ClientDateTimeUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
		ThirtyDayLimit : function() {
		var start = new GlideDateTime(this.getParameter('start'));
		var end = new GlideDateTime(this.getParameter('end'));
		start.addDaysLocalTime(30);
		return (end > start);
	},
	oneYearLimit : function() {
		var start = new GlideDateTime(this.getParameter('start'));
		var end = new GlideDateTime(this.getParameter('end'));
		start.addYearsLocalTime(1);
		return (end > start);
	},
// ---------------------------------------------------------------------------------------------------------------------------------
		//Returns the Date right now.
			getNowDate: function(){
// ---------------------------------------------------------------------------------------------------------------------------------
			
				
				return new GlideDate().toString();
			},
// ---------------------------------------------------------------------------------------------------------------------------------	
				addDateTimeAmount: function(){
// ---------------------------------------------------------------------------------------------------------------------------------
				var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
				gs.debug(firstDT);
				var addTYPE = this.getParameter('sysparm_addtype'); //What to add - second (addSeconds()), minute (need to add conversion), hour (need to add conversion), day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
							//gs.debug(addTYPE);
				var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
			//		gs.debug(addTIME);
				var day = new GlideDateTime(firstDT);
			
			
				if(addTYPE == 'second'){day.addSecondsLocalTime(addTIME);}
					else if (addTYPE == 'minute'){day.addSeconds(addTIME*60);}
						else if (addTYPE == 'hour'){day.addSeconds(addTIME*(60*60));}
							else if (addTYPE == 'day'){day.addDaysLocalTime(addTIME);}
								else if (addTYPE == 'week'){day.addWeeksLocalTime(addTIME);}
									else if (addTYPE == 'month'){day.addMonthsLocalTime(addTIME);}
										else if (addTYPE == 'year'){day.addYearsLocalTime(addTIME);}
											else {day.addDaysLocalTime(addTIME);}
											
												//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
												return day.toString();
											
											},
// ---------------------------------------------------------------------------------------------------------------------------------
	getNowDateTimeDiff: function(){
// ---------------------------------------------------------------------------------------------------------------------------------
		
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(gs.nowDateTime(), firstDT, true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
		//return "getNowDateTimeDiff: FIRST DT: " + firstDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},
	
	//Diff the amount of time between two different Date/Time fields
	//params = sysparm_fdt (the first date/time field), sysparm_sdt (second date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeDiff: function(){
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var secondDT = this.getParameter('sysparm_sdt'); // Second Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, secondDT, true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
		//return "getDateTimeDiff: FIRST DT: " + firstDT + " -SECOND DT: " + secondDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},
	
	//Takes your date/time field and returns the amount of time before now. A positive is time before now, a negative number is after now.
	//params = sysparm_fdt (the first date/time field), sysparm_difftype (time based format to return result. See "_calcDateDiff" function comments)
	getDateTimeBeforeNow: function(){
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diffTYPE = this.getParameter('sysparm_difftype'); // Date-Time Type to return the answer as. Can be second, minute, hour, day
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var timediff = this._calcDateDiff(diffTYPE, diff);
		//return "getDateTimeBeforeNow: FIRST DT: " + firstDT + " -DIFFTYPE: " + diffTYPE + " -TIME DIFF: " + timediff;
		return timediff;
	},
	
	//Returns true if it is before now, and false if it is after now.
	//params = sysparm_fdt (the first date/time field)
	getDateTimeBeforeNowBool: function(){
		var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
		var diff = gs.dateDiff(firstDT, gs.nowDateTime(), true);
		var answer = '';
		if (diff >= 0){answer = 'true';}
			else {answer = 'false';}
				return answer;
			},
			
			//Returns the Date/Time of right now.
			getNowDateTime: function(){
				var now = gs.nowDateTime(); //Now Date/Time
				return now;
			},
			
		
			
			//Returns the Time of right now.
			getNowTime: function(){
				var now = GlideTime();
				var modnow = now.getLocalTime().toString().split(' ');
				return modnow[1];
			},
			
			//Takes a date/time field and adds time to it.
			//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - second, minute, hour, day, week, month, year), sysparm_addtime (amount of time to add based on the type).

											
											//Takes a glide date field and adds time to it.
											//params = sysparm_fdt (the first date/time field), sysparm_addtype (type of time to add - day, week, month, year),sysparm_addtime (amount of time to add based on the type).
											addDateAmount: function(){
												var firstDT = this.getParameter('sysparm_fdt'); //First Date Field
												var addTYPE = this.getParameter('sysparm_addtype'); //What to add - day (addDays()), week (addWeeks()), month (addMonths()), year (addYears())
												var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
												var day = GlideDate();
												day.setValue(firstDT);
												
												if(addTYPE == 'day'){day.addDays(addTIME);}
													else if (addTYPE == 'week'){day.addWeeks(addTIME);}
														else if (addTYPE == 'month'){day.addMonths(addTIME);}
															else if (addTYPE == 'year'){day.addYears(addTIME);}
																else {day.addDays(addTIME);}
																	
																	//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + day;
																	return day;
																},
																
																addTimeAmount: function(){
																	var firstDT = this.getParameter('sysparm_fdt'); //First Date-Time Field
																	var addTYPE = this.getParameter('sysparm_addtype'); //What
																	var addTIME = this.getParameter('sysparm_addtime'); //How much time to add
																	var time = GlideTime();
																	time.setValue(firstDT);
																	
																	if(addTYPE == 'second'){time.addSeconds(addTIME);}
																		else if (addTYPE == 'minute'){time.addSeconds(addTIME*60);}
																			else if (addTYPE == 'hour'){time.addSeconds(addTIME*(60*60));}
																				else {time.addSeconds(addTIME);}
																					
																					var modtime = time.toString().split(' ');
																					//return "First Date: " + firstDT + " -Time to Add: " + addTIME + " -Add Type: " + addTYPE + " -Added Time: " + time;
																					return modtime[1];
																				},
																				
																				//Private function to calculate the date difference return result in second, minute, hour, day.
																				_calcDateDiff: function(diffTYPE, seconds){
																					var thisdiff;
																					if (diffTYPE == "day"){thisdiff = seconds/86400;}
																						else if (diffTYPE == "hour"){thisdiff = seconds/3600;}
																							else if (diffTYPE == "minute"){thisdiff = seconds/60;}
																								else if (diffTYPE == "second"){thisdiff = seconds;}
																									else {thisdiff = seconds;}
																										return thisdiff;
																									}
																									
																									
																								});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>verda.kosnett</sys_created_by>
        <sys_created_on>2018-11-05 15:34:15</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c1982d56db2daf00cf04fd0e0f9619d3</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>ClientDateTimeUtils</sys_name>
        <sys_package display_value="Badges" source="x_navyn_badges">09e85e02db74670071acf81d0f961905</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Badges">09e85e02db74670071acf81d0f961905</sys_scope>
        <sys_update_name>sys_script_include_c1982d56db2daf00cf04fd0e0f9619d3</sys_update_name>
        <sys_updated_by>verda.kosnett</sys_updated_by>
        <sys_updated_on>2019-01-14 18:40:05</sys_updated_on>
    </sys_script_include>
</record_update>
